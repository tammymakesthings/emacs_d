
#+TITLE: Emacs configuration file
#+AUTHOR: Tammy Cravit
#+DATE: Time-stamp: <2020-02-26 11:47:05 tammy.cravit>
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* About
  
This is my Emacs configuration. it is designed to be as platform
agnostic as possible, and is tangled into an [[https://orgmode.org/][org]] file with
documentation. The =init.el= file in the repo (copied as
=init.el.firstrun=) takes care of detangling and generating the
=init.el= file that is actually loaded by Emacs.

 More details about the detangling process are [[*Meta - Detangling][here]].

 The master source for this file is [[https://github.com/tammymakesthings/emacs_d][here]].

* Configuration
*** Meta - Detangling

All changes to the configuration should be done in =init.org=, *not* in
=init.el=. Any changes in the =init.el= will be overwritten by saving
=init.org=. The =init.el= in this repo should not be tracked by git, and
is replaced the first time Emacs is started (assuming it has been renamed
to =~/.emacs.d=).

Emacs can't load =.org=-files directly, but =org-mode= provides functions
to extract the code blocks and write them to a file. There are multiple
ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
could just use =org-babel-load-file=, but there are problems with
byte-compilation. 

When this configuration is loaded for the first time, the ~init.el~ is
the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; This file replaces itself with the actual configuration at first run.

     ;; We can't tangle without org!
     (require 'org)
     ;; Open the configuration
     (find-file (concat user-emacs-directory "init.org"))
     ;; tangle it
     (org-babel-tangle)
     ;; load it
     (load-file (concat user-emacs-directory "init.el"))
     ;; finally byte-compile it
     (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

It tangles the org-file, so that this file is overwritten with the actual
configuration.

There is no reason to track the =init.el= that is generated; by running
the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
     git update-index --assume-unchanged init.el
   #+END_SRC
   
If one wishes to make changes to the repo-version of =init.el= start
tracking again with:

   #+BEGIN_SRC sh :tangle no
     git update-index --no-assume-unchanged init.el
   #+END_SRC

I want lexical scoping for the init-file, which can be specified in the
header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
   ;;; -*- lexical-binding: t -*-
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;;; Emacs Configuration - Tammy Cravit
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;;; THIS FILE IS AUTO-GENERATED FROM init.org AND IS REGENERATED EVERY TIME
   ;;;; THAT FILE IS SAVED. DO NOT MAKE ANY MODIFICATIONS TO THIS FILE, OR THEY
   ;;;; WILL BE LOST WHEN THE SOURCE ORG FILE IS CHANGED!
   ;;;;
   ;;;; The latest version of the source org file can be found at:
   ;;;;
   ;;;;     https://github.com/tammymakesthings/emacs_d
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
   #+END_SRC

The =init.el= should (after the first run) mirror the source blocks in
the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
extracts the code blocks from the current file into a source-specific
file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to
the =after-save-hook= ensuring to always tangle and byte-compile the
=org=-document after changes.

#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

I'd like to keep a few settings private, so we load a =private.el= if it
exists after the init-file has loaded.

#+BEGIN_SRC emacs-lisp
  (add-hook
   'after-init-hook
   (lambda ()
     (let ((private-file (concat user-emacs-directory "private.el")))
       (when (file-exists-p private-file)
         (load-file private-file)))))
#+END_SRC

*** Meta - Assumptions

This configuration is written to be as platform-agnostic as I can make
it. However, I do make the following assumptions:

1. You're using [[https://ftp.gnu.org/gnu/emacs/][Emacs]] 26. This will *not* work correctly with previous
   versions of Emacs because of the =posframe= library's dependencies.
2. You have [[https://git-scm.com/][Git]] installed, and the =git= executable is in your path.

*** Preliminaries

On Windows, Emacs starts up in the wrong directory. Fix that before we
get too much farther.

#+BEGIN_SRC emacs-lisp
  ; Set the working directory sensibly on Windows.
  (if (and (eq system-type 'windows-nt) (getenv "HOME") (file-directory-p (getenv "HOME")))
      (cd (getenv "HOME")))
#+END_SRC

Set some variables to identify who I am.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tammy Cravit")
  (setq user-mail-address "tammymakesthings@gmail.com")
#+END_SRC

*** Package Installation

On Windows systems, I've had problems with TLS errors, so disable TLS
transport on Windows systems.

#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

Set TLS settings for installations.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'gnutls
    (if (or (eq system-type 'windows-nt) (eq system-type 'darwin))
    (setq gnutls-verify-error nil)
    (setq gnutls-min-prime-bits 1024)
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.2")
    (add-to-list 'gnutls-trustfiles "/usr/local/etc/libressl/cert.pem")))
#+END_SRC

Load the packaging system and set up repositories.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(
                          ("elpa"         . "http://tromey.com/elpa/")
                          ("gnu"          . "http://elpa.gnu.org/packages/")
                          ("melpa"        . "http://melpa.milkbox.net/packages/")
                          ("melpa-stable" . "http://stable.melpa.org/packages/")))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-pinned-packages '(cider              . "melpa-stable") t)
  (add-to-list 'package-pinned-packages '(magit              . "melpa-stable") t)
#+END_SRC

Now we need to activate packages. Do this first so the packages are
loaded before we attempt to modify them.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

Download ELPA package descriptions if necessary.

#+BEGIN_SRC emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents))
#+END_SRC

Bootstrap =use-package=. Package signature checks need to be turned
off for this because TLS is disabled.

#+BEGIN_SRC emacs-lisp
  (setq package-check-signature nil)
#+END_SRC

Set the package manager loaded and ready.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (package-install 'quelpa)
#+END_SRC

Now let's define the packages we'll need to load from ELPA.

#+BEGIN_SRC emacs-lisp
   ;; The packages you want installed. You can also install these
   ;; manually with M-x package-install
   ;; Add in your own as you wish:
   (defvar my-packages
     '(
       paredit 
       clojure-mode 
       clojure-mode-extra-font-locking 
       cider 
       ido-completing-read+ 
       smex
       projectile
       rainbow-delimiters
       tagedit
       magit
       muse
       markdown-mode
       python-mode 
       python-docstring 
       python-test 
       pydoc 
       pyenv-mode
       pyvenv 
       pythonic
       spice-mode 
       arduino-mode
       yaml-mode
       slime
       virtualenvwrapper
       gnuplot 
       gnuplot-mode
       dracula-theme
       posframe
       dash
       )
     )
#+END_SRC

Some extra stuff is needed on MacOS.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
     (add-to-list 'my-packages 'exec-path-from-shell))
#+END_SRC

And, now we're ready to install packages.

#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p)))
#+END_SRC

We'll set up =~/.emacs.d/vendor= as a place to store locally-installed
packages. You can put stuff there to ensure it's loaded. The helper
function =tlc/git-clone-to-vendor-dir= clones a git repo into the
vendor dir if it's not already present.

#+BEGIN_SRC emacs-lisp
  (unless (file-directory-p (file-truename (concat user-emacs-directory "/vendor")))
    (make-directory (file-truename (concat user-emacs-directory "/vendor"))))

(defun tlc/git-clone-to-vendor-dir (repo-name repo-src)
  (message (concat "Cloning " repo-name " to vendor/" repo-name "..."))

  (unless (file-directory-p (file-truename (concat user-emacs-directory 
                                    "/vendor/" repo-name)))
    (shell-command (format "git clone %s %s"
                            repo-src
                            (file-truename (concat user-emacs-directory "/vendor/" 
                                    repo-name))))

    (let ((default-directory (file-truename (concat user-emacs-directory "/vendor/"
                                                    repo-name))))
      (if (or (file-readable-p "Makefile") 
              (file-readable-p "Makefile"))
          (shell-command "make")))))

  (tlc/git-clone-to-vendor-dir "org" "https://github.com/bzg/org-mode.git")
  (tlc/git-clone-to-vendor-dir "doct" "https://github.com/progfolio/doct.git")
  (tlc/git-clone-to-vendor-dir "ol-get" "https://gitlab.com/xeijin-dev/ol-get.git")
  (tlc/git-clone-to-vendor-dir "org-jekyll" "https://github.com/juanre/org-jekyll.git")
  (tlc/git-clone-to-vendor-dir "ts" "https://github.com/alphapapa/ts.el.git")

  (add-to-list 'load-path (file-truename (concat user-emacs-directory "/vendor")))
  (add-to-list 'load-path (file-truename (concat user-emacs-directory "/vendor/ts")))
#+END_SRC

*** Shell Integration

Set up =exec-path-from-shell= to use the user's PATH environment
variable. See [[https://github.com/purcell/exec-path-from-shell][https://github.com/purcell/exec-path-from-shell]] for
details. 

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs
     '("PATH")))
#+END_SRC

*** Navigation
***** Uniquify Buffer Names

When several buffers visit identically-named files, Emacs must give
the buffers distinct names. The usual method for making buffer names
unique adds ‘<2>’, ‘<3>’, etc. to the end of the buffer names (all but
one of them). The forward naming method includes part of the file's
directory name at the beginning of the buffer name.

https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

***** Recent File Mode

Turn on recent file mode so that you can more easily switch to
recently edited files when you first start emacs. 

#+BEGIN_SRC emacs-lisp
  (setq recentf-save-file (concat user-emacs-directory ".recentf"))
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 40)
#+END_SRC

***** Ido Mode 
=ido-mode= allows you to more easily navigate choices. For example,
when you want to switch buffers, ido presents you with a list of
buffers in the the mini-buffer. As you start to type a buffer's name,
=ido= will narrow down the list of buffers to match the text you've
typed in

http://www.emacswiki.org/emacs/InteractivelyDoThings

#+BEGIN_SRC emacs-lisp tangle:no
  (ido-mode t)
  (setq ido-enable-flex-matching t)
  (setq ido-use-filename-at-point nil)
  (setq ido-auto-merge-work-directories-length -1)
  (setq ido-use-virtual-buffers t)
  (ido-ubiquitous-mode t)
  (ido-everywhere t)
#+END_SRC

***** Key Binding - Buffer List

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

***** Smex - Easier execution of M-x commands.

Smex enhances M-x to allow easier execution of commands. It provides
a filterable list of possible commands in the minibuffer.

http://www.emacswiki.org/emacs/Smex

#+BEGIN_SRC emacs-lisp
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
#+END_SRC

***** Projectile - Directory Project Management

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

*** UI Customizations

These customizations change the way emacs looks and disable/enable
some user interface elements. 

I'm used to interacting with Emacs in a terminal, so I don't need a
lot of the distracting GUI elements.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
#+END_SRC

Disable startup messages.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
#+END_SRC

Show the full path in the title bar.

#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format "%b (%f)")
#+END_SRC

Disable the font popup menu.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-t") '(lambda () (interactive)))
#+END_SRC

Diable the terminal bell.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

***** Show Line Numbers

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 26)
      (global-display-line-numbers-mode)
    (global-linum-mode))

  (setq column-number-mode t)
  (setq line-number-mode t)
#+END_SRC

***** Color Themes/Fonts

Read [[http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/][this article]] for a great explanation of emacs color themes. A
much more technical explanation of the theme system can be found [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][here]].

#+BEGIN_SRC emacs-lisp
  (unless (file-directory-p "~/.emacs.d/themes")
    (make-directory "~/.emacs.d/themes"))

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (add-to-list 'load-path "~/.emacs.d/themes")
  (load-theme 'dracula t)

  (require 'hl-line)
  (set-face-attribute 'default nil :height 140)
  (set-face-background hl-line-face "grey20")
#+END_SRC

Increase the font size for better readability.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 140)
#+END_SRC

This is a whole lot of code to select a good font based on what's
available on the system.

Fonts we check for, in order:

1. [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]]
2. [[https://github.com/microsoft/cascadia-code/releases][Cascadia Code PL]]
3. [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]
4. [[https://github.com/tonsky/FiraCode][Fira Code]]

The first one of these that's found will be used.

#+BEGIN_SRC emacs-lisp
  ;; Select a good UI font
  (defvar tlc/frame-font-face nil "Font face for custom-set-faces")
  (defvar tlc/frame-font-size nil "Font size for custom-set-faces")

  (if window-system
      (progn
        (cond
         ((find-font (font-spec :name "JetBrains Mono"))
          (progn
            (setq tlc/frame-font-face "JetBrains Mono")
            (setq tlc/frame-font-size 110)))
         ((find-font (font-spec :name "Cascadia Code PL"))
          (progn
            (setq tlc/frame-font-face "Cascadia Code PL")
            (setq tlc/frame-font-size 120)))
         ((find-font (font-spec :name "Source Code Pro"))
          (progn
            (setq tlc/frame-font-face "Source Code Pro")
            (setq tlc/frame-font-size 120)))
         ((find-font (font-spec :name "Fira Code"))
          (progn
            (setq tlc/frame-font-face "Fira Code")
            (setq tlc/frame-font-size 120)))
         )

        (if (and tlc/frame-font-face tlc/frame-font-size)
            (progn
              (set-face-attribute 'default nil
                                  :font tlc/frame-font-face
                                  :height tlc/frame-font-size)))))

  (if (and window-system (string-equal tlc/frame-font-face "Fira Code"))
      (use-package fira-code-mode
        :load-path "git-lisp/fira-code-mode"
        :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
        :hook prog-mode))
#+END_SRC

***** Frame Size/Position

Set the initial window size and position if we're running in a GUI. If
we only have one monitor (like on an undocked laptop) we'll start the
window maximized.

#+BEGIN_SRC emacs-lisp
  (if window-system
      (if (eq (length (display-monitor-attributes-list)) 1)
          ;; One monitor - make the window shorter and mazimize it
          (setq initial-frame-alist '((top . 5) (left . 5) (width . 132) 
                                      (height . 28) (fullscreen . maximized)))
        ;; Multiple monitors - taller window, not maximized
        (setq initial-frame-alist '((top . 15) (left . 15) 
                                    (width . 132) (height . 38))))
    (setq default-frame-alist initial-frame-alist))
#+END_SRC

***** OS kill ring/clipboard integration

#+BEGIN_SRC emacs-lisp
  (setq ;; makes killing/yanking interact with the clipboard
        x-select-enable-clipboard t

        ;; I'm actually not sure what this does but it's recommended?
        x-select-enable-primary t

        ;; Save clipboard strings into kill ring before replacing them.
        ;; When one selects something in another program to paste it into Emacs,
        ;; but kills something in Emacs before actually pasting it,
        ;; this selection is gone unless this variable is non-nil
        save-interprogram-paste-before-kill t

        ;; Shows all options when running apropos. For more info,
        ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
        apropos-do-all t

        ;; Mouse yank commands yank at point instead of at click.
        mouse-yank-at-point t)
#+END_SRC

***** Redefine split-window behavior.

For a lot of coding things, Emacs tends to like to split windows
horizontally. For reasons I don't understand, they call this a
vertical split. Also, for reasons I don't understand, this behavior is
shockingly difficult to change. 

This code comes from [[https://emacs.stackexchange.com/questions/39034/prefer-vertical-splits-over-horizontal-ones][Stack Overflow]], and it forces Emacs to split
windows vertically unless they're small.

#+BEGIN_SRC emacs-lisp
  (defun split-window-sensibly-prefer-horizontal (&optional window)
  "Based on split-window-sensibly, but designed to prefer a horizontal split,
  i.e. windows tiled side-by-side."
    (let ((window (or window (selected-window))))
      (or (and (window-splittable-p window t)
           ;; Split window horizontally
           (with-selected-window window
             (split-window-right)))
      (and (window-splittable-p window)
           ;; Split window vertically
           (with-selected-window window
             (split-window-below)))
      (and
           ;; If WINDOW is the only usable window on its frame (it is
           ;; the only one or, not being the only one, all the other
           ;; ones are dedicated) and is not the minibuffer window, try
           ;; to split it horizontally disregarding the value of
           ;; `split-height-threshold'.
           (let ((frame (window-frame window)))
             (or
              (eq window (frame-root-window frame))
              (catch 'done
                (walk-window-tree (lambda (w)
                                    (unless (or (eq w window)
                                                (window-dedicated-p w))
                                      (throw 'done nil)))
                                  frame)
                t)))
       (not (window-minibuffer-p window))
       (let ((split-width-threshold 0))
         (when (window-splittable-p window t)
           (with-selected-window window
                 (split-window-right))))))))

  (defun split-window-really-sensibly (&optional window)
    (let ((window (or window (selected-window))))
      (if (> (window-total-width window) (* 2 (window-total-height window)))
          (with-selected-window window (split-window-sensibly-prefer-horizontal window))
        (with-selected-window window (split-window-sensibly window)))))

  (setq
     split-height-threshold 4
     split-width-threshold 40
     split-window-preferred-function 'split-window-really-sensibly)
#+END_SRC

*** Editing Customizations

These customizations affect things related to editing files in
buffers.

Enable highlighting of matching parens.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Highlight the current line.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Don't use hard tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)

  (defun die-tabs ()
    (interactive)
    (set-variable 'tab-width 2)
    (mark-whole-buffer)
    (untabify (region-beginning) (region-end))
    (keyboard-quit))
#+END_SRC

Bind the F7 key to execute ~eval-region~ since I do this a lot when
I'm testing code.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f7>") 'eval-region)
#+END_SRC

Enable saving of your place in files you edit. See [[http://www.emacswiki.org/emacs/SavePlace][here]] for details.

#+BEGIN_SRC emacs-lisp
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "places"))
#+END_SRC

Emacs can automatically create backup files. This tells Emacs to
put all backups in =~/.emacs.d/backups=. See [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html][here]] for details.

#+BEGIN_SRC emacs-lisp
  (unless (file-directory-p (concat user-emacs-directory "backups"))
    (make-directory (concat user-emacs-directory "backups")))

  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
#+END_SRC

Add the C-; command to comment a line.

#+BEGIN_SRC emacs-lisp
  (defun toggle-comment-on-line ()
    "comment or uncomment current line"
    (interactive)
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (global-set-key (kbd "C-;") 'toggle-comment-on-line)
#+END_SRC

This fixes a weird MacOS X pasteboard error.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    ;; fix weird os x kill error
    (defun ns-get-pasteboard ()
      "Returns the value of the pasteboard, or nil for unsupported formats."
      (condition-case nil
          (ns-get-selection-internal 'CLIPBOARD)
        (quit nil))))
#+END_SRC

Disable electric indent.

#+BEGIN_SRC emacs-lisp
(setq electric-indent-mode nil)
#+END_SRC

Enable the Emacs [[https://www.emacswiki.org/emacs/TimeStamp][timestamp]] feature. When this feature is active, the
text =Time-stamp: <>= within the first 8 lines of your file will be
automatically updated to the current time whenever the file is saved.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'time-stamp)
    (add-hook 'before-save-hook 'time-stamp))
#+END_SRC

***** Enable Hippie Expand 

[[http://www.emacswiki.org/emacs/HippieExpand][HippieExpand]] ooks at the word before point and tries to expand it in
various ways including expanding from a fixed list (like
=expand-abbrev=), expanding from matching text found in a buffer (like
=dabbrev-expand=) or expanding in ways defined by your own functions.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)

  ;; Lisp-friendly hippie expand
  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol))
#+END_SRC

***** Isearch Key Bindings

By default, C-s runs =isearch-forward=, so this swaps the bindings.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

*** Programming Languages

Load and configure modes for various programming languages.

***** Shell Scripts

#+BEGIN_SRC emacs-lisp
  (setq-default sh-basic-offset 2)
  (setq-default sh-indentation 2)
#+END_SRC

***** Emacs-Lisp

Load paredit mode. I have it disabled because it was making editing
difficult. 

#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)

  ;;(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;;(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  ;;(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  ;;(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  ;;(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  ;;(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC


Enable [[http://www.emacswiki.org/emacs/ElDoc][eldoc-mode]], which shows documentation in the minibuffer when
writing code.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

***** Clojure

[[https://clojure.org/][Clojure]] is a dynamic, general-purpose functional programming language
based on Lisp, which is compiled to bytecode that runs on the Java
virtual machine. Clojure support for Emacs is provided by [[https://github.com/clojure-emacs/cider][CIDER]].

Enable paredit for clojure.

#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'enable-paredit-mode)
#+END_SRC

Enable =subword-mode= for Clojure. This is useful for working with
CamelCasedTokens such as Java class names.

#+BEGIN_SRC emacs-lisp
;;;;
;; Clojure
;;;;

;; Enable paredit for Clojure
(add-hook 'clojure-mode-hook 'enable-paredit-mode)

;; This is useful for working with camel-case tokens, like names of
;; Java classes (e.g. JavaClassName)
(add-hook 'clojure-mode-hook 'subword-mode)

;; A little more syntax highlighting
(require 'clojure-mode-extra-font-locking)
(set-face-background hl-line-face "grey20")
;; syntax hilighting for midje
(add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")
            (font-lock-add-keywords
             nil
             '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
               ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
            (define-clojure-indent (fact 1))
            (define-clojure-indent (facts 1))
            (rainbow-delimiters-mode)))

;;;;
;; Cider
;;;;

;; provides minibuffer documentation for the code you're typing into the repl
(add-hook 'cider-mode-hook 'eldoc-mode)

;; go right to the REPL buffer when it's finished connecting
(setq cider-repl-pop-to-buffer-on-connect t)

;; When there's a cider error, show its buffer and switch to it
(setq cider-show-error-buffer t)
(setq cider-auto-select-error-buffer t)

;; Where to store the cider history.
(setq cider-repl-history-file "~/.emacs.d/cider-history")

;; Wrap when navigating history.
(setq cider-repl-wrap-history t)

(setq cider-repl-display-help-banner nil)

;; enable paredit in your REPL
(add-hook 'cider-repl-mode-hook 'paredit-mode)

;; Use clojure mode for other extensions
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
(add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


;; key bindings
;; these help me out with the way I usually develop web apps
(defun cider-start-http-server ()
  (interactive)
  (cider-load-current-buffer)
  (let ((ns (cider-current-ns)))
    (cider-repl-set-ns ns)
    (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
    (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))

(defun cider-refresh ()
  (interactive)
  (cider-interactive-eval (format "(user/reset)")))

(defun cider-user-ns ()
  (interactive)
  (cider-repl-set-ns "user"))

(eval-after-load 'cider
  '(progn
     (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
     (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
     (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
     (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
#+END_SRC

***** Python

Setup the Python imenu.

#+BEGIN_SRC emacs-lisp
(defun my-merge-imenu ()
  (interactive)
  (let ((mode-imenu (imenu-default-create-index-function))
        (custom-imenu (imenu--generic-function imenu-generic-expression)))
    (append mode-imenu custom-imenu)))
#+END_SRC

Define our =python-mode= hooks and key bindings.
#+BEGIN_SRC emacs-lisp
(defun my-python-hooks()
    (interactive)
    (setq tab-width     4
          python-indent 4
          python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i")
    (if (string-match-p "rita" (or (buffer-file-name) ""))
        (setq indent-tabs-mode t)
      (setq indent-tabs-mode nil)
    )
    (add-to-list
        'imenu-generic-expression
        '("Sections" "^#### \\[ \\(.*\\) \\]$" 1))
    (setq imenu-create-index-function 'my-merge-imenu)
    ;; pythom mode keybindings
    (define-key python-mode-map (kbd "M-.") 'jedi:goto-definition)
    (define-key python-mode-map (kbd "M-,") 'jedi:goto-definition-pop-marker)
    (define-key python-mode-map (kbd "M-/") 'jedi:show-doc)
    (define-key python-mode-map (kbd "M-?") 'helm-jedi-related-names)
    ;; end python mode keybindings

    (eval-after-load "company"
        '(progn
            (unless (member 'company-jedi (car company-backends))
                (setq comp-back (car company-backends))
                (push 'company-jedi comp-back)
                (setq company-backends (list comp-back)))
            )))

(add-hook 'python-mode-hook 'my-python-hooks)
;; End Python mode
#+END_SRC

***** Javascript

Settings for Javascript code editing.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
  (add-hook 'js-mode-hook 'subword-mode)
  (add-hook 'html-mode-hook 'subword-mode)
  (setq js-indent-level 2)
  (eval-after-load "sgml-mode"
    '(progn
       (require 'tagedit)
       (tagedit-add-paredit-like-keybindings)
       (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+END_SRC

And settings for Coffeescript editing.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.coffee.erb$" . coffee-mode))
  (add-hook 'coffee-mode-hook 'subword-mode)
  (add-hook 'coffee-mode-hook 'highlight-indentation-current-column-mode)
  (add-hook 'coffee-mode-hook
            (defun coffee-mode-newline-and-indent ()
              (define-key coffee-mode-map "\C-j" 'coffee-newline-and-indent)
              (setq coffee-cleanup-whitespace nil)))
  (custom-set-variables
   '(coffee-tab-width 2))
#+END_SRC

***** Lisp

Emacs does Lisp coding very well, obviously, but we still need to load
[[https://common-lisp.net/project/slime/][SLIME]], the Superior Lisp Editing Mode for Emacs.

#+BEGIN_SRC emacs-lisp
  (cond
   (
    (eq system-type 'windows-nt)
    (progn
      (setenv "SBCL_HOME" "c:/sbcl")
      (setq inferior-lisp-program "c:/sbcl/sbcl.exe")))
   (t (setq inferior-lisp-program "sbcl")))
#+END_SRC

If we have [[https://www.quicklisp.org/beta/][Quicklisp]] installed, we also need to load the Quicklisp
SLIME helper.

#+BEGIN_SRC emacs-lisp
  (defvar slime-helper-file nil "Location of the quicklisp slime-helper.el")
  (setq slime-helper-file (expand-file-name "~/quicklisp/slime-helper.el"))
  (if (and (fboundp 'slime-mode) (file-readable-p slime-helper-file))
      (load-file slime-helper-file))
#+END_SRC

***** Smalltalk

Emacs smalltalk-mode customizations.

#+BEGIN_SRC emacs-lisp
  (setq smalltalk-indent-amount 2)
  (setq smalltalk-indent-align-colon t)
#+END_SRC

***** YAML

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+END_SRC

*** Gnus

*** Org Mode

[[https://orgmode.org/][Org mode]] is Emacs's mode for outlining files in plain text. It started
out as an organization and notetaking system, but has been massively
extended to also allow publishing, literate programming, and all sorts
of other stuff. As you'll see, it's VERY customizable.

We load =org-mode= from our =vendor/= tree.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat (file-truename user-emacs-directory) "vendor/org/lisp"))
  (add-to-list 'load-path (concat (file-truename user-emacs-directory) "vendor/org/contrib/lisp"))

  (require 'org)

  ;; Load org extensions
  (setq org-modules
        (quote (
                org-bbdb
                org-bibtex
                org-ctags
                org-datetree
                org-docview
                org-element
                org-gnus
                org-id
                org-info
                org-inlinetask
                org-irc
                org-mhe
                org-mouse
                org-protocol
                org-rmail
                org-w3m
                )))
  (require 'org-element)
  (require 'org-datetree)
  (require 'org-protocol)
  (require 'org-inlinetask)
#+END_SRC

Load org-babel (code) extensions for languages we use.

#+BEGIN_SRC emacs-lisp
  (require 'ob-core)
  (require 'ob-dot)
  (require 'ob-emacs-lisp)
  (require 'ob-eval)
  (require 'ob-js)
  (require 'ob-python)
  (require 'ob-ruby)
  (require 'ob-shell)
  (require 'ob-arduino)
  (require 'ob-clojure)
  (require 'ob-clojure-literate)
  (require 'ob-spice)
#+END_SRC

Since version 8, Org uses a modular exporter. Load the exporter pieces
we need.

#+BEGIN_SRC emacs-lisp tangle:no
  (require 'ox-publish)
  (require 'ox-html)
  (require 'ox-latex)
  (require 'ox-ascii)
  (require 'ox-md)
  (require 'ox-man)
  (require 'ox-beamer)
  (require 'ox-org)
#+END_SRC

***** Org File Associations

We'll make org-mode the default for new buffers, as well as for text
files. 

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org_archive$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
  (setq default-major-mode 'org-mode)
#+END_SRC

We need to locate our =org-life= directory, either from github or
Dropbox. We prefer the github repo, and will clone it if we can't find
it. 

#+BEGIN_SRC emacs-lisp
  (defvar tlc/org-github-repo nil "Github directory for my org-life files")
  (setq tlc/org-github-repo "git@github.com:tammymakesthings/org_life.git")

  (cond
   ((file-directory-p "~/org-life") (setq org-directory (expand-file-name "~/org-life")))
   ((file-directory-p "~/Dropbox/org-life") (setq org-directory (expand-file-name "~/Dropbox/org-life")))
   (t (setq org-directory (expand-file-name "~/org-life"))))

  (unless (file-directory-p org-directory)
    (if (yes-or-no-p (concat "Org directory \"" org-directory "\" not found - clone from Github?"))
        (shell-command (concat "git clone " tlc/org-github-repo " " (expand-file-name org-directory)))))
#+END_SRC

***** Basic Configuration

Set the default notes file.

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/journal.org"))
#+END_SRC

Define a function to open our most used files with a keystroke.

#+BEGIN_SRC emacs-lisp

  (defvar tlc/org-master-files nil 
    "List of files for tlc/open-org-files to open.

  File names are relative to org-directory.")

  (defun tlc/open-org-files ()
    "Open the default set of org files.

  The default set of org files is specified by tlc/org-master-files."
    (interactive)
    (if (length tlc/org-master-files)
        (progn
          (let (value)
            (dolist (elt tlc/org-master-files value)
              (find-file-noselect (concat org-directory "/" elt))))
          (switch-to-buffer "master.org"))
      (message "Add your master org files to tlc/org-master-files and try again")))

  (setq tlc/org-master-files '(
                               "master.org"
                               "journal.org"
                               "proj_eos.org"
                               "codex.org"))

  (global-set-key (kbd "<f12>") 'tlc/open-org-files)
  (global-set-key "\C-c=" 'tlc/open-org-files)
#+END_SRC

Set a bunch of general settings.

#+BEGIN_SRC emacs-lisp
  (setq org-indent-mode t)
  (setq org-hide-leading-stars t)
  (setq org-odd-levels-only t)
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)

  (setq org-special-ctrl-a/e t)
  (setq org-use-speed-commands t)

  (setq require-final-newline t)
  (setq org-clone-delete-id t)
  (setq org-src-fontify-natively t)
  (setq org-catch-invisible-edits 'error)

  (setq org-alphabetical-lists t)
  (setq org-blank-before-new-entry '((heading . auto) (plain-list-item . nil)))
#+END_SRC

Default startup settings for when we're opening new org files.

#+BEGIN_SRC emacs-lisp 
  (setq org-startup-truncated nil)
  (setq org-startup-folded nil)
  (setq org-startup-indented t)
#+END_SRC

Enable =font-lock-mode= and =fill-mode= in org files.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-font-lock)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

***** General Helper Functions

******* Add a Folded Property to a Subtree

This code sets the STARTUP "folded" property for the currently
selected subtree.

#+BEGIN_SRC emacs-lisp
  (defun tlc/org-add-folded-property nil
    "Add the STARTUP folded property to the subtree at point."
    (interactive)
    (org-set-property "STARTUP" "folded"))
#+END_SRC

***** Org Key Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (global-set-key "\C-cp" 'org-insert-property-drawer)
  (global-set-key "\C-cr" 'org-refile)
  (global-set-key "\C-c/" 'org-agenda-list)
  (global-set-key "\C-cf" 'tlc/org-add-folded-property)
  (global-set-key (kbd "<f4>") 'org-table-recalculate-buffer-tables)

  (global-set-key "\C-c\C-l" 'org-insert-link)
  (global-set-key (kbd "<f7>") 'org-agenda)
  (global-set-key (kbd "<f8>") 'org-agenda-list)
#+END_SRC

***** Archiving Settings

Set the archiving location and options.

#+BEGIN_SRC emacs-lisp
  (setq org-archive-location "%s_archive::datetree/* Archive")
  (setq org-archive-mark-done nil)
#+END_SRC

Enable archiving of a subtree to provide context from the original
file, rather than flattening. See
[[https://gist.github.com/osamu2001/370843]].

#+BEGIN_SRC emacs-lisp
  (defadvice org-archive-subtree (around fix-hierarchy activate)
    (let* ((fix-archive-p (and (not current-prefix-arg)
                               (not (use-region-p))))
           (afile (org-extract-archive-file (org-get-local-archive-location)))
           (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
      ad-do-it
      (when fix-archive-p
        (with-current-buffer buffer
          (goto-char (point-max))
          (while (org-up-heading-safe))
          (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
                 (path (and olpath (split-string olpath "/")))
                 (level 1)
                 tree-text)
            (when olpath
              (org-mark-subtree)
              (setq tree-text (buffer-substring (region-beginning) (region-end)))
              (let (this-command) (org-cut-subtree))
              (goto-char (point-min))
              (save-restriction
                (widen)
                (-each path
                  (lambda (heading)
                    (if (re-search-forward
                         (rx-to-string
                          `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                        (org-narrow-to-subtree)
                      (goto-char (point-max))
                      (unless (looking-at "^")
                        (insert "\n"))
                      (insert (make-string level ?*)
                              " "
                              heading
                              "\n"))
                    (cl-incf level)))
                (widen)
                (org-end-of-subtree t t)
                (org-paste-subtree level tree-text))))))))
#+END_SRC

***** Org Agenda Settings

Set general org-agenda options.

#+BEGIN_SRC emacs-lisp
  (setq org-deadline-warning-days 30)
  (setq org-agenda-skip-additional-timestamps-same-entry t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-include-all-todo t)
  (setq org-agenda-include-diary t)
  (setq org-agenda-tags-todo-honor-ignore-options t)
#+END_SRC

Specify our =org-agenda-files=.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list
                           (concat org-directory "/master.org")
                           (concat org-directory "/journal.org")
                           (concat org-directory "/calls.org")
                           (concat org-directory "/proj_eos.org")
                           ))
#+END_SRC

Helper function for =org-agenda-custom-commands= to skip a subtree if
it has a particular priority. From [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron's blog]].

#+BEGIN_SRC emacs-lisp
  (defun air/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
#+END_SRC

Define custom agenda views.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ("c" "Simple agenda view"
           (
            (tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "")
            (alltodo ""
                     ((org-agenda-skip-function
                       '(or (air/org-skip-subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))))))))
          ("d" "Upcoming deadlines" agenda ""
           ((org-agenda-time-grid nil)
            (org-deadline-warning-days 365)
            (org-agenda-entry-types '(:deadline))))

          ("Q" . "Custom Queries")
          ("Qa" "Archive search" search ""
           (org-agenda-files (file-expand-wildcards (concat org-directory "/archive/*.org"))))
          ("Ql" "Lists search" search ""
           (org-agenda-files (file-expand-wildcards (concat org-directory "/list_*.org"))))
          ("Qp" "Projects search" search ""
           (org-agenda-files (file-expand-wildcards (concat org-directory "/proj_*.org"))))
          ("Qw" "Writing search" search ""
           (org-agenda-files (file-expand-wildcards (concat org-directory "/writing_*.org"))))
          ("Qr" "Refile search" search ""
           (org-agenda-files (file-expand-wildcards (concat org-directory "/refile*.org"))))
          ))
#+END_SRC

***** Logging Settings

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)
#+END_SRC

***** Tagging and Keyword Settings

Simplify tag selection.

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-fast-tag-selection-single-key (quote expert))
#+END_SRC

Define the default set of tags.

#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist
        (quote (
                (:startgroup) ("PROJECT" . ?p) ("EOS" . ?e ) ("WORK" . ?w) ("LEARNING" . ?l) ("PERSONAL" . ?p) (:endgroup)
                ("FLAGGED" . ?f)
                (:startgroup) ("DELEGATED" . ?d) ("WAITING" . ?w) ("CANCELED" . ?c) (:endgroup)
                (:startgroup) ("MEETING" . ?m) ("ONEONONE" . ?o) ("NOTE" . ?n) ("JOURNAL" . ?j) ("IDEA" . ?i) (:endgroup)
                )))
#+END_SRC

Define font faces for tags.

#+BEGIN_SRC emacs-lisp
  (setq org-tag-faces
        (quote (
                ("PROJECT" :foreground "forest green" :weight bold)
                ("EOS" :foreground "gold" :weight bold)
                ("LEARNING" :foreground "medium spring green" :weight bold)
                ("PERSONAL" :foreground "medium slate blue" :weight bold)
                ("FLAGGED" :foreground "deep pink" :weight bold)
                ("CANCELED" :foreground "IndianRed3" :weight bold)
                ("DELEGATED" :foreground "sienna1" :weight bold)
                ("WAITING" :foreground "sienna1" :weight bold)
                ("MEETING" :foreground "LightPink3" :weight bold)
                ("NOTE" :foreground "orchid3" :weight bold)
                ("JOURNAL" :foreground "orchid3" :weight bold)
                ("ONEONONE" :foreground "orchid3" :weight bold)
                ("IDEA" :foreground "orchid3" :weight bold))))
#+END_SRC

Define the default set of TODO states.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '(
          (sequence "TODO(t)" "DOING(d!)" "WAITING(w@/!)" "|" "DONE(x)" "CANCELED (c@)")
          ))
#+END_SRC

Define font faces for todo keyword states.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
        (quote (
                ("TODO" :foreground "red" :weight bold)
                ("DOING" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("DONE" :foreground "medium orchid" :weight bold)
                ("CANCELED" :foreground "forest green" :weight bold))))
#+END_SRC

***** Org Property Settings

Enable property inheritance.

#+BEGIN_SRC emacs-lisp
  (setq org-use-property-inheritance t)
#+END_SRC

***** Org Capture Settings

Load [[https://github.com/progfolio/doct/][doct]], a helper library to declaratively set
=org-capture-templates=.

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/vendor/doct/doct.el")
#+END_SRC

We define a list of tasks for each day of the week. These are used by
=tlc/org-today-entry= to build the list of tasks for today. We also
define helpers for accessing entries in this list.

#+BEGIN_SRC emacs-lisp
    (defvar tlc/org-dow-tasks
      '((0 . nil) (1 . nil) (2 . nil) (3 . nil) (4 . nil) (5 . nil) (6 . nil))
      "A list of day-specific tasks for each day of the week. Used by the
    org-today-entry capture template.

    The car of each item in the list is a DOW number (as found in the 6th element of
    the list returned by parse-time-string.

    The cdr of these elements is a list of todo entries. These will
    be inserted into the Tasks section of the entry created by
    tlc/org-today-entry. You can set those manually or using the
    shortcut helper function tlc/set-org-dow-tasks.")

    (defun tlc/set-org-dow-tasks (dow tasklist)
      "Helper to set tlc/org-dow-tasks. See the documentation for
    tlc/org-dow-tasks for details."
      (if (and (>= dow 0) (<= dow 6))
          (setcdr (assq dow tlc/org-dow-tasks) tasklist)
        (message "tlc/set-org-dow-tasks: dow must be between 0 and 6")))

  (defun tlc/org-today-entry-daily-tasks nil
    (interactive)
    (string-join
     (cdr (assoc (nth 6 (parse-time-string (current-time-string))) tlc/org-dow-tasks))
     "\n******* TODO"))

  (tlc/set-org-dow-tasks 0 '(
                            "TODO Weekly Review"
                            "TODO Check in on SpringCM Activity"
                            "TODO Update SOW tracker with weekend activity"
                            ))

  (tlc/set-org-dow-tasks 4 '(
                             "TODO Update EOS Track Status Report"
                             ))

  (tlc/set-org-dow-tasks 5 '(
                             "TODO Send weekly SOW charges to FinAct"
                            ))
#+END_SRC

And now we can define the =org-capture-templates= used by
=org-capture=. There are lots of them.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        (doct '(
                ("Today Entry"
                 :keys "z"
                 :file "master.org" :olp ("Journal")
                 :type entry :datetree t :tree-type week :prepend t
                 :template (
                            "* Capacity Manager"
                            "*** TODO Draft SOWs [/]"
                            "*** TODO Upload SOWs to SpringCM [/]"
                            "*** TODO Send SOWs for signature [/]"
                            "* EOS - PSA Track                                   :EOS:"
                            "* Tasks - Work"
                            "%(tlc/org-today-entry-daily-tasks)"
                            "*** "
                            "* Tasks - Personal"
                            "*** "
                            "* Notes"
                            "***"
                            )
                 )
                ("Tasks"
                 :keys "t"
                 :file "refile.org" :headline "To Refile" :type entry
                 :children (
                            ("Respond"
                             :keys "r"
                             :template "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n")
                            ("Meeting with %?"
                             :keys "m"
                             :template "* MEETING with %? :MEETING:\n%U")
                            ("Task"
                             :keys "t"
                             :template "* TODO %?\n%U\n")
                            ("Call"
                             :keys "c"
                             :template "* Phone Call with %?\n%U")
                            )
                 )
                ("Tasks (EOS)"
                 :keys "T"
                 :file "proj_eos.org" :type entry :olp ("Journal")
                 :datetree t :time-prompt t :tree-type week :prepend t
                 :children (
                            ("Respond"
                             :keys "r"
                             :template "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n")
                            ("Meeting with %?"
                             :keys "m"
                             :template "* MEETING with %? :MEETING:\n%U")
                            ("Task"
                             :keys "t"
                             :template "* TODO %?\n%U\n")
                            ("Call"
                             :keys "c"
                             :template "* Phone Call with %?\n%U")
                            )
                 )

                (:group "Note" :type entry :olp ("Journal")
                        :datetree t :time-prompt t :tree-type week :prepend t
                        :template "* %? :NOTE:\n%U\n"
                        :children (
                                   ("Note" :keys "n" :file "journal.org")
                                   ("Note (EOS)" :keys "N" :file "proj_eos.org")
                                   ))

                (:group "Journal" :type entry  :olp ("Journal")
                        :datetree t :time-prompt t :tree-type week :prepend t
                        :template  "* %? :JOURNAL:\n%U\n"
                        :children (
                                   ("Journal" :keys "j" :file "journal.org")
                                   ("Journal (EOS)" :keys "J" :file "proj_eos.org")
                                   ("Idea" :keys "i" :file "journal.org"
                                    :template "* %? :IDEA:\n%U\n")
                                   ))

                ("Writing Journal" :type entry
                 :keys "w" :time-prompt t :tree-type week :prepend t :olp ("Journal")
                 :template "* %<%Y-%m-%d>\n    %?"
                 :children
                 (
                  ("AZ Mystery 1" :keys "a" :file "writing/az_mystery_1/az_mystery_1.org")
                  ("Transformation 2ed" :keys "t" :file "writing/transformation_2e/transformation_2e.org")
                  ("Short Stories" :keys "s" :file "writing_short_stories.org")
                  ))

                ("One-on-One Meeting"
                 :keys "o"
                 :file "journal.org" :type entry :olp ("Journal")
                 :datetree t :tree-type week :prepend t
                 :template (
                            "* One on One - %^{PROMPT} :ONEONONE:"
                            "*** My Agenda Items [/]"
                            "- [ ] %?"
                            "*** Other Agenda Items"
                            "*****"
                            "*** Notes"
                            "*** Next Actions"
                            ))

                ("Link" :keys "l" :file "codex.org" :template "*** %?\n%U\n")

                ("To Buy" :keys "B" :file "personal.org" :headline "To Buy"
                 :template "* TODO Buy %c\n%U\n")

                ("Errand" :keys "E" :file "personal.org" :headline "Errands"
                 :template "* TODO%c\n%U\n")

                ("Someday" :keys "S" :file "someday.org" :headline "Inbox"
                 :template "* TODO%c\n%U\n")

                ("Protocol" :keys "p" :file "master.org" :headline "Inbox"
                 :template ("* %^{Title}"
                            "Source: %u, %c"
                            "#+BEGIN_QUOTE"
                            "%i"
                            "#+END_QUOTE\n\n\n"
                            "%?"))

                ("Protocol Link" :keys "L" :file "master.org" :headline "Inbox"
                 :template ("* %? [[%:link][%:description]] "
                            "Captured On: %U"))

                ("Habit"
                 :keys "h" :file "master.org" :headline "Habits"
                 :template (
                            "* NEXT %?"
                            "  SCHEDULED: <%<%Y-%m-%d %a .+1d>>"
                            "  :PROPERTIES:"
                            "  :CREATED: %U"
                            "  :STYLE: habit"
                            "  :REPEAT_TO_STATE: NEXT"
                            "  :LOGGING: DONE(!)"
                            "  :ARCHIVE: %%s_archive::* Habits"
                            "  :END:"
                            "  %U"
                            )
                 )
                )
              ))
#+END_SRC

Automatically re-align tags after capturing.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'org-align-all-tags)
  (add-hook 'org-after-tags-change-hook 'org-align-all-tags)
#+END_SRC

***** Refile Settings

This is a helper function to refile into a datetree. It comes from
[[https://github.com/alphapapa/unpackaged.el][here]].

#+BEGIN_SRC emacs-lisp
  (cl-defun unpackaged/org-refile-to-datetree (file &key (date (calendar-current-date)) entry)
    "Refile ENTRY or current node to entry for DATE in datetree in FILE."
    (interactive (list (read-file-name "File: " (concat org-directory "/") nil 'mustmatch nil
                                       (lambda (filename)
                                         (string-suffix-p ".org" filename)))))
    ;; If org-datetree isn't loaded, it will cut the tree but not file
    ;; it anywhere, losing data. I don't know why
    ;; org-datetree-file-entry-under is in a separate package, not
    ;; loaded with the rest of org-mode.
    (require 'org-datetree)
    (unless entry
      (org-cut-subtree))
    ;; Using a condition-case to be extra careful. In case the refile
    ;; fails in any way, put cut subtree back.
    (condition-case err
        (with-current-buffer (or (org-find-base-buffer-visiting file)
                                 (find-file-noselect file))
          (org-datetree-file-entry-under (or entry (car kill-ring)) date)
          (save-buffer))
      (error (unless entry
               (org-paste-subtree))
             (message "Unable to refile! %s" err))))
#+END_SRC

Define valid refile targets.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(
                             (nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 5)
                             ("someday.org" :maxlevel . 5)
                             ))
#+END_SRC

Settings for the =org-refile= functions.

#+BEGIN_SRC emacs-lisp
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-use-outline-path t)
  (setq org-capture-bookmark nil)
  (setq org-reverse-note-order t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-cache t)
#+END_SRC

***** Journal Entries

Decide where the org journal file lives.

#+BEGIN_SRC emacs-lisp
  (defvar org-journal-file (concat org-directory "/journal.org") "Path to OrgMode journal file.")
#+END_SRC

Set the date format for journal entries.

#+BEGIN_SRC emacs-lisp
  (defvar org-journal-date-format "%Y-%m-%d" "Date format string for journal headings.")
#+END_SRC

***** Timeclock settings

Enable clocking in and out. Clock events are saved to the LOGBOOK
drawer.

#+BEGIN_SRC emacs-lisp :tangle no
  (org-clock-persistence-insinuate)

  (setq org-clock-history-length 23)
  (setq org-clock-in-resume t)
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  (setq org-clock-idle-time 15)
  (setq org-clock-into-drawer t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-out-when-done t)
  (setq org-clock-persist t)
  (setq org-clock-persist-query-resume nil)
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  (setq org-clock-report-include-clocking-task t)
#+END_SRC

Remove empty LOGBOOK drawers on clock-out.

#+BEGIN_SRC emacs-lisp :tangle no
  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at "LOGBOOK" (point))))
  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+END_SRC

***** Org Structure and Formatting

Define structure templates.

#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
        (quote (("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
                ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
                ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
                ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n</verse>")
                ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n</center>")
                ("l" "#+begin_latex\n?\n#+end_latex" "<literal style=\"latex\">\n?\n</literal>")
                ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
                ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
                ("H" "#+html: " "<literal style=\"html\">?</literal>")
                ("a" "#+begin_ascii\n?\n#+end_ascii")
                ("A" "#+ascii: ")
                ("i" "#+index: ?" "#+index: ?")
                ("I" "#+include %file ?" "<include file=%file markup=\"?\">"))))
#+END_SRC

Define emphasis pairs.

#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                   ("/" italic "<i>" "</i>")
                                   ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                   ("=" org-code "<code>" "</code>" verbatim)
                                   ("~" org-verbatim "<code>" "</code>" verbatim))))
#+END_SRC

Disable superscripts and subscripts.

#+BEGIN_SRC emacs-lisp
  (setq org-use-sub-superscripts nil)
#+END_SRC

***** Org custom enter key behavior

This function supplies more context-aware enter key behavior in
outlines. It can be disabled by setting =tlc/enable-org-custom-return=
to =nil=.

#+BEGIN_SRC emacs-lisp
  (defun unpackaged/org-element-descendant-of (type element)
    "Return non-nil if ELEMENT is a descendant of TYPE.
  TYPE should be an element type, like `item' or `paragraph'.
  ELEMENT should be a list like that returned by `org-element-context'."
    ;; MAYBE: Use `org-element-lineage'.
    (when-let* ((parent (org-element-property :parent element)))
      (or (eq type (car parent))
          (unpackaged/org-element-descendant-of type parent))))

  (defvar tlc/enable-org-custom-return nil
    "Set to true to enable scimax/org-return functionality")

  (defun unpackaged/org-return-dwim (&optional default)
    "A helpful replacement for `org-return'.  With prefix, call `org-return'.

  On headings, move point to position after entry content.  In
  lists, insert a new item or end the list, with checkbox if
  appropriate.  In tables, insert a new row or end the table.

  You can disable the custom behavior globally by setting the variable
  `tlc/org-enable-custom-return` to a nil value.
  "
    (interactive "P")
    (if (or default (not tlc/enable-org-custom-return))
        (org-return)
      (cond
       ;; Act depending on context around point.

       ((eq 'link (car (org-element-context)))
        ;; Link: Open it.
        (org-open-at-point-global))

       ((org-at-heading-p)

        ;; Heading: Move to position after entry content.
        ;; NOTE: This is probably the most interesting feature of this function.
        (let ((heading-start (org-entry-beginning-position)))
          (goto-char (org-entry-end-position))
          (cond ((and (org-at-heading-p)
                      (= heading-start (org-entry-beginning-position)))
                 ;; Entry ends on its heading; add newline after
                 (end-of-line)
                 (insert "\n\n"))
                (t
                 ;; Entry ends after its heading; back up
                 (forward-line -1)
                 (end-of-line)
                 (when (org-at-heading-p)
                   ;; At the same heading
                   (forward-line)
                   (insert "\n")
                   (forward-line -1))
                 ;; FIXME: looking-back is supposed to be called with more arguments.
                 (while (not (looking-back (rx (repeat 3 (seq (optional blank) "\n")))))
                   (insert "\n"))
                 (forward-line -1)))))

       ((org-at-item-checkbox-p)
        ;; Checkbox: Insert new item with checkbox.
        (org-insert-todo-heading nil))

       ((org-in-item-p)
        ;; Plain list.  Yes, this gets a little complicated...
        (let ((context (org-element-context)))
          (if (or (eq 'plain-list (car context))  ; First item in list
                  (and (eq 'item (car context))
                       (not (eq (org-element-property :contents-begin context)
                                (org-element-property :contents-end context))))
                  (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
              ;; Non-empty item: Add new item.
              (org-insert-item)
            ;; Empty item: Close the list.
            ;; TODO: Do this with org functions rather than operating on the text. Can't seem to find the right function.
            (delete-region (line-beginning-position) (line-end-position))
            (insert "\n"))))

       ((when (fboundp 'org-inlinetask-in-task-p)
          (org-inlinetask-in-task-p))
        ;; Inline task: Don't insert a new heading.
        (org-return))

       ((org-at-table-p)
        (cond ((save-excursion
                 (beginning-of-line)
                 ;; See `org-table-next-field'.
                 (cl-loop with end = (line-end-position)
                          for cell = (org-element-table-cell-parser)
                          always (equal (org-element-property :contents-begin cell)
                                        (org-element-property :contents-end cell))
                          while (re-search-forward "|" end t)))
               ;; Empty row: end the table.
               (delete-region (line-beginning-position) (line-end-position))
               (org-return))
              (t
               ;; Non-empty row: call `org-return'.
               (org-return))))
       (t
        ;; All other cases: call `org-return'.
        (org-return)))))

  (require 'org-inlinetask)

  (setq tlc/enable-org-custom-return t)
  (define-key org-mode-map (kbd "RET") 'unpackaged/org-return-dwim)
#+END_SRC

***** Org-Babel Settings

Enable syntax highlight in #+BEGIN_SRC blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Don't prompt before running code in org.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Fix an incompatibility between the =ob-async= and =ob-ipython= packages

#+BEGIN_SRC emacs-lisp
  (setq ob-async-no-async-languages-alist '("ipython"))
#+END_SRC

***** Org File Skeletons

[[https://www.emacswiki.org/emacs/SkeletonMode][Skeleton mode]] is a mechanism for defining file templates in Emacs.

Define a skeleton for an Org file header.

#+BEGIN_SRC emacs-lisp
  (define-skeleton tlc/org-file-header-skeleton
    "Insert the header into aan org-mode file."
    "# -*- mode: org; coding: utf-8; -*-\n"
    "#+TITLE: " (skeleton-read "Title: ") "\n"
    "#+AUTHOR: " user-full-name "\n"
    "#+EMAIL: " user-mail-address "\n"
    "#+DATE: Time-stamp: <>\n"
    "#+STARTUP: content hideblocks hidestars align logdone logdeadline odd\n"
    "#+STARTUP:  fnlocal fnaauto fnadjust \n"
    "#+FILETAGS: :" (skeleton-read "File tags (colon-separated): ") ":\n"
    )
#+END_SRC

Define a skeleton for an Org project file.

#+BEGIN_SRC emacs-lisp
  (define-skeleton tlc/org-project-skeleton
    "Create a skeleton for an org project file."
    "# -*- mode: org; coding: utf-8; -*-\n"
    "#+TITLE: Projects - " (skeleton-read "Project Name: ") "\n"
    "#+AUTHOR: " user-full-name "\n"
    "#+EMAIL: " user-mail-address "\n"
    "#+DATE: Time-stamp: <>\n"
    "#+STARTUP: content hideblocks hidestars align logdone logdeadline odd\n"
    "#+STARTUP:  fnlocal fnaauto fnadjust \n"
    "#+TAGS: INITIATION(i) PLANNING(p) EXECUTION(e) MONITORING(m) CLOSURE(c)\n"
    "#+TAGS: MEETING(M) DEADLINE(D) DELIVERABLE(E) KPI(K) RESULT(R)\n"
    "#+FILETAGS: :PROJECT:\n"
    "\n"
    "* Inbox\n"
    "* Project Planning\n"
    "*** Initiation :INITIATION:\n"
    "****** Project Charter\n"
    "****** Stakeholders\n"
    "*** Planning :PLANNING:\n"
    "***** Goals\n"
    "***** Scope Statement\n"
    "***** Milestones\n"
    "***** Communication Plan\n"
    "***** Risks\n"
    "*** Execution :EXECUTION:\n"
    "***** Project Meetings\n"
    "*** Monitoring & Control :MONITORING:\n"
    "***** Status Reports\n"
    "*** Closure :CLOSURE:\n"
    "***** Post Mortem\n"
    "***** Punch List\n"
    "***** Final Report\n")
#+END_SRC


Define a skeleton for a writing project.

#+BEGIN_SRC emacs-lisp
  (define-skeleton tlc/org-writing-skeleton
    "Create a skeleton for writing/publishing files."
    "#+TITLE: " (skeleton-read "Title: ") "\n"
    "#+AUTHOR: " user-full-name "\n"
    "#+EMAIL: " user-mail-address "\n"
    "#+DATE: Time-stamp: <>\n"
    "#+CREATOR: " user-full-name "\n"
    "#+LANGUAGE: en\n"
    "#+EXCLUDE_TAGS: noexport\n"
    "#+OPTIONS: ':t *:t -:t ::t author:t creator:t date:t e:t email:t f:t H:3\n"
    "#+OPTIONS: title:t |:t toc:nil\n"
    "#+TAGS: noexport(n) draft(d) revise(r) complete(c)\n"
    "#+STARTUP: content hideblocks hidestars align logdone logdeadline odd\n"
    "#+STARTUP: fnlocal fnaauto fnadjust \n"
    "#+FILETAGS: :WRITING:MANUSCRIPT:\n"
    "\n"
    "* Characters                                                       :noexport:\n"
    "* Settings                                                         :noexport:\n"
    "* Research                                                         :noexport:\n"
    "* Journal                                                          :noexport:\n"
    "* Dedication\n"
    "* Acknowledgements\n"
    "* Prologue\n"
    "* Chapter 1\n"
    "* Unfiled Scenes                                                   :noexport:\n")
#+END_SRC

Set key bindings for the org file skeletons.

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-c0" (lambda nil
                            (interactive)
                            (tlc/org-project-skeleton)
                            (org-align-all-tags)))
  (global-set-key "\C-c9" (lambda nil
                            (interactive)
                            (tlc/org-file-header-skeleton)
                            (org-align-all-tags)))
  (global-set-key "\C-c8" (lambda nil
                            (interactive)
                            (tlc/org-writing-skeleton)
                            (org-align-all-tags)))
#+END_SRC

Define helpers for jumping beteen skeleton markers. Markere are
defined by including =@= characters in the skeletons. This came from [[;; From
 https://www.emacswiki.org/emacs/SkeletonMode][here]].

#+BEGIN_SRC emacs-lisp
  (defvar *skeleton-markers* nil "Markers for locations saved in skeleton-positions")

  (add-hook 'skeleton-end-hook 'skeleton-make-markers)

  (defun skeleton-make-markers ()
    (while *skeleton-markers*
      (set-marker (pop *skeleton-markers*) nil))
    (setq *skeleton-markers*
          (mapcar 'copy-marker (reverse skeleton-positions))))

  (defun skeleton-next-position (&optional reverse)
    "Jump to next position in skeleton.
           REVERSE - Jump to previous position in skeleton"
    (interactive "P")
    (let* ((positions (mapcar 'marker-position *skeleton-markers*))
           (positions (if reverse (reverse positions) positions))
           (comp (if reverse '> '<))
           pos)
      (when positions
        (if (catch 'break
              (while (setq pos (pop positions))
                (when (funcall comp (point) pos)
                  (throw 'break t))))
            (goto-char pos)
          (goto-char (marker-position
                      (car *skeleton-markers*)))))))

  (global-set-key (kbd "\C-c <prior>") (lambda nil (interactive) (skeleton-next-position t)))
  (global-set-key (kbd "\C-c <next>") (lambda nil (interactive) (skeleton-next-position nil)))
#+END_SRC

***** Project Functions

From https://karl-voit.at/2019/11/03/org-projects/.

#+BEGIN_SRC emacs-lisp
  (defun tlc/mark-as-project ()
  "This function makes sure that the current heading has

  (1) the tag :project:
  (2) has property COOKIE_DATA set to \"todo recursive\"
  (3) has any TODO keyword and
  (4) a leading progress indicator"
      (interactive)
      (org-toggle-tag "project" 'on)
      (org-set-property "COOKIE_DATA" "todo recursive")
      (org-back-to-heading t)
      (let* ((title (nth 4 (org-heading-components)))
             (keyword (nth 2 (org-heading-components))))
         (when (and (bound-and-true-p keyword) (string-prefix-p "[" title))
             (message "TODO keyword and progress indicator found")
             )
         (when (and (not (bound-and-true-p keyword)) (string-prefix-p "[" title))
             (message "no TODO keyword but progress indicator found")
             (forward-whitespace 1)
             (insert "NEXT ")
             )
         (when (and (not (bound-and-true-p keyword)) (not (string-prefix-p "[" title)))
             (message "no TODO keyword and no progress indicator found")
             (forward-whitespace 1)
             (insert "NEXT [/] ")
             )
         (when (and (bound-and-true-p keyword) (not (string-prefix-p "[" title)))
             (message "TODO keyword but no progress indicator found")
             (forward-whitespace 2)
             (insert "[/] ")
             )
         )
  )
#+END_SRC

***** Todo Hooks

#+BEGIN_SRC emacs-lisp
  (defvar tlc/enable-todo-state-change-hook nil
    "Set to true to enable the TODO state change hook.")

  (defun tlc/todo-state-change-hook ()
    "Hook function that fires on todo state changes.

  Currently this hook just clocks in when a TODO changes to the \"DOING\" state,
  and clocks out when a TODO changes to the \"TODO\" or \"WAITING\" states. When
  I figure out the right incantation to make it work, it'll also remove priority
  tags when a TODO is marked as DONE or CANCELED."
    (if tlc/enable-todo-state-change-hook
        (progn
          (cond
           ((string-equal org-state "DOING")
            (progn 
              (org-clock-in)))
           ((member org-state '("TODO" "WAITING"))
            (progn
              (org-clock-out t)))))))
  (add-hook 'org-after-todo-state-change-hook 'tlc/todo-state-change-hook)
#+END_SRC

***** Git Integration

#+BEGIN_SRC emacs-lisp
  (defun tlc/commit-org-to-git (&optional dont-push)
    "Snapshot commit the org directory to git."
      (interactive "P")
      (let ((orig-directory (pwd))
            (date-string (format-time-string "%Y-%m-%d %H:%M:%S")))
        (interactive)
        (cd (expand-file-name org-directory))
        (shell-command (concat "git add " (expand-file-name org-directory)))
        (shell-command (concat
                        "git commit "
                        "-a "
                        "-m "
                        (shell-quote-argument (concat "Snapshot Commit at " 
                                                      date-string 
                                                      " from tlc/commit-org-to-git"))))
        (unless dont-push
          (shell-command "git push"))

        (if (file-directory-p orig-directory)
            (cd orig-directory))))

  (global-set-key "\C-cg" 'tlc/commit-org-to-git)
#+END_SRC

***** Formula helpers for org tables

#+BEGIN_SRC emacs-lisp
  (defun tlc/rangeck (value min max &optional suppress-normal)
    "A helper function for Org tables to check if numbers are in a range."
    (cond
     ((and (eq min 0) (eq max 0)) "")
     ((and (eq min nil) (eq max nil)) "")
     ((or (eq value "") (eq value nil) (eq value 0)) "---")
     ((< value min) "** low")
     ((> value max) "high **")
     (t (if suppress-normal "" "normal"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun tlc/labtest-exceptions (col-number)
  "Filters an org-mode lab results table for abnormal results."
  (cl-loop 
   for row in tbl
   if (or (string-equal (nth col-number row) "high **") (string-equal (nth col-number row) "** low"))
   collect row into newtbl
   finally return (append '(hline ("" "Group" "Test" "Status" "Low" "Value" "High") hline) newtbl)))
#+END_SRC

***** Org publishing

Helper to export org subtrees to multiple files.

#+BEGIN_SRC emacs-lisp
  (defun org-global-props (&optional property buffer)
    "Get the plists of global org properties of current buffer."
    (unless property (setq property "PROPERTY"))
    (with-current-buffer (or buffer (current-buffer))
      (org-element-map (org-element-parse-buffer) 'keyword (lambda (el) (when (string-match property (org-element-property :key el)) el)))))

  (defun org-global-prop-value (key)
    "Get global org property KEY of current buffer."
    (org-element-property :value (car (org-global-props key))))

  (defun tlc/org-export-headlines-to-pdf ()
    "Export all subtrees that are *not* tagged with :noexport: to
  separate files.

  Subtrees that do not have the :EXPORT_FILE_NAME: property set
  are exported to a filename derived from the headline text."
    (interactive)
    (save-buffer)
    (let ((modifiedp (buffer-modified-p)))
      (save-excursion
        (goto-char (point-min))
        (goto-char (re-search-forward "^*"))
        (set-mark (line-beginning-position))
        (goto-char (point-max))
        (org-map-entries
         (lambda ()
           (let ((export-file (or (org-entry-get (point) "EXPORT_FILE_NAME")
                                  (org-global-prop-value "EXPORT_FILE_NAME")))
              (org-export-as-latex 7 nil export-file t (expand-file-name "./tex"))
             (deactivate-mark)
             (set-buffer-modified-p modifiedp))))))))
#+END_SRC

Make sure =ox-latex= is loaded.

#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
#+END_SRC

Always publish org projects, even if the source files are unchanged.

#+BEGIN_SRC emacs-lisp
  (setq org-publish-use-timestamps-flag nil)
#+END_SRC

Define custom =pub_book= and =pub_book_fmem= classes. These are used
by the [[https://github.com/tammymakesthings/latex-nonfiction-ebook-template][latex-nonfiction-ebook-template]] template to create the right
levels of hierarchy in book projects.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
              '(
                  "pub_book"
                  "[NO_DEFAULT_PACKAGES][NO_PACKAGES][NO_EXTRA]"
                  ("\\part{%s}" . "\\part*{%s}")
                  ("\\chapter{%s}" . "\\chapter*{%s}")
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  (add-to-list 'org-latex-classes
              '(
                  "pub_book_fmem"
                  "[NO_DEFAULT_PACKAGES][NO_PACKAGES][NO_EXTRA]"
                  ("\\chapter*{%s}" . "\\chapter*{%s}")
                  ("\\section*{%s}" . "\\section*{%s}")
                  ("\\subsection*{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection*{%s}" . "\\subsubsection*{%s}")))
#+END_SRC

Define a helper function to publish an org file to latex and then
rename it.

#+BEGIN_SRC emacs-lisp
  (defun tlc/org-publish-and-rename-latex (src dst plist filename pubdir)
    (if (file-exists-p dst) (delete-file dst))
    (org-latex-publish-to-latex plist filename pubdir)
    (rename-file src dst))
#+END_SRC

******* Trans/Formation 2nd Ed Publishing Settings

Define helper functions to publish the three pieces of the book (front
matter, main matter, end matter) and rename them appropriately after
output. 

#+BEGIN_SRC emacs-lisp
  (defun tlc/org-publish-transformation2e-fm (plist filename pubdir)
    (tlc/org-publish-and-rename-latex
     "~/org-life/transformation_2e/tex/transformation_2e.tex"
     "~/org-life/transformation_2e/tex/transformation_2e_frontmatter.tex"
     plist filename pubdir))

  (defun tlc/org-publish-transformation2e-main (plist filename pubdir)
    (tlc/org-publish-and-rename-latex
     "~/org-life/transformation_2e/tex/transformation_2e.tex"
     "~/org-life/transformation_2e/tex/transformation_2e_main.tex"
     plist filename pubdir))

  (defun tlc/org-publish-transformation2e-em (plist filename pubdir)
    (tlc/org-publish-and-rename-latex
     "~/org-life/transformation_2e/tex/transformation_2e.tex"
     "~/org-life/transformation_2e/tex/transformation_2e_endmatter.tex"
     plist filename pubdir))
#+END_SRC

Define the =org-publish-project-alist= to publish the book files for
this project.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist 
               '("transformation2e"
                 :components ( "transformation2e_fm" 
                               "transformation2e_main" 
                               "transformation2e_em")))

  (add-to-list 'org-publish-project-alist
               '("transformation2e_fm"
                 :base-directory "~/org-life/transformation_2e"
                 :publishing-directory "~/org-life/transformation_2e/tex"
                 :publishing-function tlc/org-publish-transformation2e-fm
                 :select-tags ("frontmatter")
                 :with-latex t :latex-class "pub_book_fmem" :body-only t))

  (add-to-list 'org-publish-project-alist
               '("transformation2e_main"
                 :base-directory "~/org-life/transformation_2e"
                 :publishing-directory "~/org-life/transformation_2e/tex"
                 :publishing-function tlc/org-publish-transformation2e-main
                 :select-tags ("mainmatter")
                 :with-latex t :latex-class "pub_book" :body-only t))

  (add-to-list 'org-publish-project-alist
               '("transformation2e_em"
                 :base-directory "~/org-life/transformation_2e"
                 :publishing-directory "~/org-life/transformation_2e/tex"
                 :publishing-function tlc/org-publish-transformation2e-em
                 :select-tags ("endmatter")
                 :with-latex t :latex-class "pub_book_fmem" :body-only t))
#+END_SRC

***** Outlook Integration

#+BEGIN_SRC emacs-lisp
  (defvar tlc/enable-org-outlook-integration t "Enable ol-get for Outlook integration")
  (when (and tlc/enable-org-outlook-integration (eq system-type 'windows-nt))
    (progn
      (require 'ts)
      (add-to-list 'load-path (expand-file-name "~/.emacs.d/vendor/ol-get"))
      (add-to-list 'load-path (expand-file-name "~/.emacs.d/vendor/posframe"))
      (require 'ol-get)
      (setq
       ol-get-python-executable "python"
       ol-get-outlook-diary-file "~/outlook-diary"
       org-agenda-include-diary t)
      (defun org-outlook-open (id)
        "Open the Outlook item identified by ID. ID should be an Outlook GUID."
        (w32-shell-execute "open" "outlook.exe" ;; outlook.exe is on shell path by default
                           (concat "/select " "outlook:" id)))

      (org-add-link-type "outlook" #'org-outlook-open)
      ))
#+END_SRC
      

*** LaTeX editing

*** Gnu Server 

Make sure the Gnu server is started if it's available.

#+BEGIN_SRC emacs-lisp
  (unless (and (fboundp 'server-running-p) 
           (server-running-p))
     (server-start))
#+END_SRC

*** Miscellaneous Customizations

***** Change all yes/no questions to y/n type

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

***** Create a New Empty Buffer

If the =*scratch*= buffer doesn't exist, it'll be created. If it does, a new
buffer of the form untitled-1, Untitled-2, etc. will be created. If the 
buffer name is not =*scratch*=, you'll be offered a chance to save it.

From [[http://ergoemacs.org/emacs/emacs_new_empty_buffer.html][http://ergoemacs.org/emacs/emacs_new_empty_buffer.html]].

#+BEGIN_SRC emacs-lisp
  (defun tlc/new-empty-buffer nil
    "Create a new empty buffer.

  If the *scratch* buffer doesn't exist, it'll be created. If it does, a new
  buffer of the form untitled-1, Untitled-2, etc. will be created. If the 
  buffer name is not *scratch*, you'll be offered a chance to save it."
    (interactive)
    (if (get-buffer "*scratch*")
        (progn
          (let (($buf (generate-new-buffer "untitled")))
            (switch-to-buffer $buf)
            (funcall initial-major-mode)
            (setq buffer-offer-save t)
            $buf))
      (progn
          (let (($buf (generate-new-buffer "*scratch*")))
            (switch-to-buffer $buf)
            (funcall initial-major-mode)
            (setq buffer-offer-save nil)
            $buf))))

  (global-set-key (kbd "<f5>") 'tlc/new-empty-buffer)
#+END_SRC

*** customize Settings

Random stuff set by the Emacs customize interface. Could probably be
refactored out to somewhere else.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(coffee-tab-width 2)
   '(muse-project-alist nil)
   '(package-selected-packages
     (quote
      (auctex smalltalk-mode gnuplot gnuplot-mode posframe
              virtualenvwrapper ts use-package gnu-elpa-keyring-update py-test
              pyvenv pylint pyenv-mode-auto pydoc py-autopep8 python-black
              python-environment python-test python-docstring python-pytest
              spice-mode magit-org-todos magithub git org-protocol-jekyll
              slime markdown-mode pythonic help-find-org-mode muse cider-hydra
              magit tagedit rainbow-delimiters projectile smex
              ido-completing-read+ cider clojure-mode-extra-font-locking
              clojure-mode paredit exec-path-from-shell)))
   '(show-paren-mode t) 
   '(tool-bar-mode nil))

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC
